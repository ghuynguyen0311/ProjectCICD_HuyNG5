# Workflow name
name: cd-backend

# Triggers for the workflow
on:
  workflow_dispatch:
  push:
    branches:
    - main

# Jobs defined in the workflow
jobs:
  setup-job:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Install dependencies
      run: |
        cd starter/backend
        pipenv install

    - name: Install flake8
      run: |
        cd starter/backend
        pipenv install flake8

  lint-job:
    runs-on: ubuntu-latest
    needs: setup-job
    steps:
    - name: Run lint
      run: |
        cd starter/backend
        pipenv run lint

  test-job:
    runs-on: ubuntu-latest
    needs: setup-job
    steps:
    - name: Run tests
      run: |
        cd starter/backend
        pipenv run test

  build-job:
    name: Build
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      id: login-amz-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, push image
      env:
        ECR_REGISTRY: ${{ steps.login-amz-ecr.outputs.registry }}
        ECR_REPOSITORY: "mp-backend"
        IMAGE_TAG: latest
      run: |
        cd starter/backend
        docker build -t mp-backend:latest .
        docker tag mp-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  deploy-job:
    name: Deploy
    needs: [build-job]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      id: login-amz-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Update k8s config
      run: aws eks update-kubeconfig --name=cluster

    - name: Deploy using kustomize
      working-directory: ./starter/backend/k8s
      env:
        ECR_REGISTRY: ${{ steps.login-amz-ecr.outputs.registry }}
        ECR_REPOSITORY: "mp-backend"
        IMAGE_TAG: latest
      run: |
        kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        kustomize build
        kubectl apply -f service.yaml
        kubectl apply -f deployment.yaml
        kubectl get svc -A
