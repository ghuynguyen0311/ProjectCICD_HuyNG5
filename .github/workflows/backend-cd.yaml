name: backend-cd

on:
  workflow_dispatch:
  push:
    branches:
    - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check the Repository
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install Rependencies
      working-directory: starter/backend
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8
    - name: Checkout Run Lint
      run: cd starter/backend && pipenv run lint
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Check the Repository
      uses: actions/checkout@v3
    - name: Use Python 3
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install Dependencies
      working-directory: starter/backend
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pip install flake8
    - name: Test
      run: cd starter/backend && pipenv install pytest && pipenv run test
  build:
    name: build
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1 # Specify your AWS region

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      id: login-amz-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, push image
      env:
        ECR_REGISTRY: ${{ steps.login-amz-ecr.outputs.registry }}
        ECR_REPOSITORY: "movie-server"
        IMAGE_TAG: latest
      run: "cd starter/backend  # Change to the specific directory\ndocker build -t movie-server:latest .  # image name\ndocker tag movie-server:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest\ndocker push $ECR_REGISTRY/$ECR_REPOSITORY:latest \necho \"image=$ECR_REGISTRY/$ECR_REPOSITORY:latest\" >> $GITHUB_OUTPUT\n#magic___^_^___line\n"
  deploy-job:
    name: deploy
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1 # Specify your AWS region

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      id: login-amz-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Update k8s config
      run: aws eks update-kubeconfig --name=movie-server

    - name: Deploy using kustomize
      working-directory: ./starter/backend/k8s
      env:
        ECR_REGISTRY: ${{ steps.login-amz-ecr.outputs.registry }}
        ECR_REPOSITORY: "movie-server"
        IMAGE_TAG: latest
      run: |
        kustomize edit set image movie-server=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        kustomize build
        kubectl apply -f service.yaml
        kubectl apply -f deployment.yaml
        kubectl get svc -A



